## Test Input

// SPDX-License-Identifier: CC0

pragma solidity ^0.7.0;

contract MyContract {

  secret uint256 private a;
  secret uint256 private b;

  function assign(uint256 param1, uint256 param2) public {
    known a = a + param1;
    b = param2;
  }
}

## Expected Output

path.scope.indicators has (among other fields):

{
  '<id of a>': {
    name: 'a',
    referenceCount: 2,
    modificationCount: 1,
    oldCommitmentReferenceRequired: true,
    isModified: true,
    isAccessed: true,
    newCommitmentRequired: true,
    isNullified: true,
    initialisationRequired: true,
    isKnown: true,
    isIncremented: true,
    isDecremented: false,
    isWhole: true,
    isPartitioned: false/undef,
    isWholeReason: [],
  }
  '<id of b>': {
    name: 'b',
    referenceCount: 1,
    modificationCount: 1,
    oldCommitmentReferenceRequired: true,
    isModified: true,
    isAccessed: false,
    newCommitmentRequired: true,
    isNullified: true,
    initialisationRequired: true,
    isKnown: true/undef, (prefer true)
    isIncremented: false,
    isDecremented: false,
    isWhole: true,
    isPartitioned: false/undef,
    isWholeReason: [],
  }
}


## Test Input

// SPDX-License-Identifier: CC0

pragma solidity ^0.7.0;

contract MyContract {

  secret uint256 private a;
  secret uint256 private b;

  function assign(secret uint256 param1, secret uint256 param2) public {
    unknown a = a + param1;
    b = a + param2;
  }
}

## Expected Output

path.scope.indicators has (among other fields):

{
  '<id of a>': {
    name: 'a',
    referenceCount: 3,
    modificationCount: 1,
    oldCommitmentReferenceRequired: true,
    isModified: true,
    isAccessed: true,
    newCommitmentRequired: true,
    isNullified: true,
    initialisationRequired: false,
    isUnknown: true,
    isIncremented: true,
    isDecremented: false,
    isWhole: false/undef,
    isPartitioned: true,
    isPartitionedReason: [],
  }
  '<id of b>': {
    name: 'b',
    referenceCount: 1,
    modificationCount: 1,
    oldCommitmentReferenceRequired: false,
    isModified: true,
    isAccessed: false,
    newCommitmentRequired: true,
    isNullified: true,
    initialisationRequired: true,
    isUnknown: true,
    isIncremented: true?, // unsure of expected output
    isDecremented: true?,
    isWhole: false/undef,
    isPartitioned: true,
    isPartitionedReason: [],
  }
}

## Test Input

// SPDX-License-Identifier: CC0

pragma solidity ^0.7.0;

contract MyContract {

  secret uint256 private a;
  secret uint256 private b;

  function assign(uint256 param1, uint256 param2) public {
    unknown a = a + param1;
    known b = a + param2;
  }
}

## Expected Output

Error: conflicting known/unknown decorators

## Test Input

// SPDX-License-Identifier: CC0

pragma solidity ^0.7.0;

contract MyContract {

  secret mapping(uint256 => uint256) private a;
  secret uint256 private b;

  function assign(uint256 param1, uint256 param2) public {
    unknown a[param1] = a[param1] + param2;
  }

  function assign2(uint256 param3, uint256 param4) public {
    a[param3] = a[param3] - param4;
  }

  function assign3(uint256 param5) public {
    b = param5;
  }
}

## Expected Output

path.scope.indicators has (among other fields):

{
  '<id of a>': {
    name: 'a',
    isModified: true,
    isAccessed: true,
    mappingKey: {
      param1: {
        referenceCount: 2,
        modificationCount: 1,
        oldCommitmentReferenceRequired: false,
        newCommitmentRequired: true,
        isNullified: false,
        initialisationRequired: false,
        isUnknown: true,
        isIncremented: true,
        isDecremented: false,
        isWhole: false/undef,
        isPartitioned: true,
        isPartitionedReason: [],
      }
      param3: {
        referenceCount: 2,
        modificationCount: 1,
        oldCommitmentReferenceRequired: true,
        newCommitmentRequired: true,
        isNullified: true,
        initialisationRequired: false,
        isUnknown: false,
        isIncremented: true,
        isDecremented: true,
        isWhole: false/undef,
        isPartitioned: true,
        isPartitionedReason: [],
      }
    }
  }
  '<id of b>': {
    name: 'b',
    referenceCount: 1,
    modificationCount: 1,
    oldCommitmentReferenceRequired: true,
    isModified: true,
    isAccessed: false,
    newCommitmentRequired: true,
    isNullified: true,
    initialisationRequired: true,
    isUnknown: false/undef,
    isIncremented: false,
    isDecremented: false,
    isWhole: true,
    isPartitioned: false,
    isWholeReason: [],
  }
}
