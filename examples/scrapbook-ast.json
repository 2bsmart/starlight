SOURCE CODE:

// SPDX-License-Identifier: CC0

pragma solidity ^0.8.0;

contract MyContract {

  uint256[] myDynamicArray;
  address[5] myStaticArray;
  mapping(uint256 => uint256) myUintMapping;
  mapping(address => address) myAddressMapping;

  function assignToDynamicArray(uint param1) public {
    myDynamicArray.push(param1);
  }

  function getFromDynamicArray(uint indexParam) public view returns (uint) {
    return myDynamicArray[indexParam];
  }

  function assignToStaticArray(uint indexParam, address param1) public {
    myStaticArray[indexParam] = param1;
  }

  function getFromStaticArray(uint indexParam) public view returns (address) {
    return myStaticArray[indexParam];
  }

  function assignToMyUintMapping(uint key1, uint param1) public {
    myUintMapping[key1] = param1;
  }

  function assignToMyAddressMapping(address param1) public {
    myAddressMapping[msg.sender] = param1;
  }
}


AST NODES:


uint256[] myDynamicArray; // VariableDeclaration:

{
    "constant": false,
    "id": 4,
    "mutability": "mutable",
    "name": "myDynamicArray",
    "nodeType": "VariableDeclaration",
    "scope": 94,
    "src": "89:24:0",
    "stateVariable": true,
    "storageLocation": "default",
    "typeDescriptions": {
        "typeIdentifier": "t_array$_t_uint256_$dyn_storage",
        "typeString": "uint256[]"
    },
    "typeName": {
        "baseType": { <<<<<<<<<<<< difference from mapping
            "id": 2,
            "name": "uint256",
            "nodeType": "ElementaryTypeName",
            "src": "89:7:0",
            "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
            }
        },
        "id": 3,
        <<<<<<<<<<<< Notice no `length` key (to distinguish from static array)
        "nodeType": "ArrayTypeName", <<<<<<<<<<<< difference from mapping
        "src": "89:9:0",
        "typeDescriptions": {
            "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
            "typeString": "uint256[]"
        }
    },
    "visibility": "internal"
}

GET FROM DYNAMIC ARRAY:

return myDynamicArray[indexParam];

{
    "expression": {
        "baseExpression": {
            "id": 35,
            "name": "myDynamicArray",
            "nodeType": "Identifier",
            "overloadedDeclarations": [],
            "referencedDeclaration": 4, <<<<<<<< to distinguish between dynamic vs static arrays, look back at the VariableDeclaration of the referencedDeclaration node.
            "src": "427:14:0",
            "typeDescriptions": {
                "typeIdentifier": "t_array$_t_uint256_$dyn_storage",
                "typeString": "uint256[] storage ref"
            }
        },
        "id": 37,
        "indexExpression": {
            "id": 36,
            "name": "indexParam",
            "nodeType": "Identifier",
            "overloadedDeclarations": [],
            "referencedDeclaration": 30,
            "src": "442:10:0",
            "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
            }
        },
        "isConstant": false,
        "isLValue": true,
        "isPure": false,
        "lValueRequested": false,
        "nodeType": "IndexAccess",
        "src": "427:26:0",
        "typeDescriptions": {
            "typeIdentifier": "t_uint256",
            "typeString": "uint256"
        }
    },
    "functionReturnParameters": 34,
    "id": 38,
    "nodeType": "Return",
    "src": "420:33:0"
}

ASSIGN TO DYNAMIC ARRAY:

myDynamicArray.push(param1);

NOT ANALYSING THIS AT THE MOMENT, BECAUSE SNARKS DON'T SUPPORT DYNAMIC ARRAYS

{
    "expression": {
        "arguments": [
            {
                "id": 24,
                "name": "param1",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 18,
                "src": "321:6:0",
                "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                }
            }
        ],
        "expression": {
            "argumentTypes": [
                {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                }
            ],
            "expression": {
                "id": 21,
                "name": "myDynamicArray",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 4,
                "src": "301:14:0",
                "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_uint256_$dyn_storage",
                    "typeString": "uint256[] storage ref"
                }
            },
            "id": 23,
            "isConstant": false,
            "isLValue": false,
            "isPure": false,
            "lValueRequested": false,
            "memberName": "push",
            "nodeType": "MemberAccess",
            "src": "301:19:0",
            "typeDescriptions": {
                "typeIdentifier": "t_function_arraypush_nonpayable$_t_uint256_$returns$__$",
                "typeString": "function (uint256)"
            }
        },
        "id": 25,
        "isConstant": false,
        "isLValue": false,
        "isPure": false,
        "kind": "functionCall",
        "lValueRequested": false,
        "names": [],
        "nodeType": "FunctionCall",
        "src": "301:27:0",
        "tryCall": false,
        "typeDescriptions": {
            "typeIdentifier": "t_tuple$__$",
            "typeString": "tuple()"
        }
    },
    "id": 26,
    "nodeType": "ExpressionStatement",
    "src": "301:27:0"
}


address[5] myStaticArray; // VariableDeclaration

{
    "constant": false,
    "id": 8,
    "mutability": "mutable",
    "name": "myStaticArray",
    "nodeType": "VariableDeclaration",
    "scope": 94,
    "src": "118:24:0",
    "stateVariable": true,
    "storageLocation": "default",
    "typeDescriptions": {
        "typeIdentifier": "t_array$_t_address_$5_storage",
        "typeString": "address[5]"
    },
    "typeName": {
        "baseType": {
            "id": 5,
            "name": "address",
            "nodeType": "ElementaryTypeName",
            "src": "118:7:0",
            "stateMutability": "nonpayable",
            "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
            }
        },
        "id": 7,
        "length": { <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< Length distinguishes static from dynamic arrays
            "hexValue": "35",
            "id": 6,
            "isConstant": false,
            "isLValue": false,
            "isPure": true,
            "kind": "number",
            "lValueRequested": false,
            "nodeType": "Literal",
            "src": "126:1:0",
            "typeDescriptions": {
                "typeIdentifier": "t_rational_5_by_1",
                "typeString": "int_const 5"
            },
            "value": "5"
        },
        "nodeType": "ArrayTypeName",
        "src": "118:10:0",
        "typeDescriptions": {
            "typeIdentifier": "t_array$_t_address_$5_storage_ptr",
            "typeString": "address[5]"
        }
    },
    "visibility": "internal"
}

GET FROM STATIC ARRAY:

return myStaticArray[indexParam];

{
    "expression": {
        "baseExpression": {
            "id": 61,
            "name": "myStaticArray",
            "nodeType": "Identifier",
            "overloadedDeclarations": [],
            "referencedDeclaration": 8, <<<<<<<< to distinguish between dynamic vs static arrays, look back at the VariableDeclaration of the referencedDeclaration node.
            "src": "676:13:0",
            "typeDescriptions": {
                "typeIdentifier": "t_array$_t_address_$5_storage",
                "typeString": "address[5] storage ref"
            }
        },
        "id": 63,
        "indexExpression": {
            "id": 62,
            "name": "indexParam",
            "nodeType": "Identifier",
            "overloadedDeclarations": [],
            "referencedDeclaration": 56,
            "src": "690:10:0",
            "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
            }
        },
        "isConstant": false,
        "isLValue": true,
        "isPure": false,
        "lValueRequested": false,
        "nodeType": "IndexAccess",
        "src": "676:25:0",
        "typeDescriptions": {
            "typeIdentifier": "t_address",
            "typeString": "address"
        }
    },
    "functionReturnParameters": 60,
    "id": 64,
    "nodeType": "Return",
    "src": "669:32:0"
}

ASSIGN TO STATIC ARRAY:

myStaticArray[indexParam] = param1;

{
    "expression": {
        "id": 51,
        "isConstant": false,
        "isLValue": false,
        "isPure": false,
        "lValueRequested": false,
        "leftHandSide": {
            "baseExpression": {
                "id": 47,
                "name": "myStaticArray",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 8, <<<<<<<< to distinguish between mappings vs arrays, look back at the VariableDeclaration of the referencedDeclaration node.
                "src": "541:13:0",
                "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_address_$5_storage",
                    "typeString": "address[5] storage ref" <<< Could use this to distinguish, but a bit messy
                }
            },
            "id": 49,
            "indexExpression": {
                "id": 48,
                "name": "indexParam",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 42,
                "src": "555:10:0",
                "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                }
            },
            "isConstant": false,
            "isLValue": true,
            "isPure": false,
            "lValueRequested": true,
            "nodeType": "IndexAccess", <<<< SAME AS MAPPING!!!!
            "src": "541:25:0",
            "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
            }
        },
        "nodeType": "Assignment",
        "operator": "=",
        "rightHandSide": {
            "id": 50,
            "name": "param1",
            "nodeType": "Identifier",
            "overloadedDeclarations": [],
            "referencedDeclaration": 44,
            "src": "569:6:0",
            "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
            }
        },
        "src": "541:34:0",
        "typeDescriptions": {
            "typeIdentifier": "t_address",
            "typeString": "address"
        }
    },
    "id": 52,
    "nodeType": "ExpressionStatement",
    "src": "541:34:0"
}

mapping(uint256 => uint256) myUintMapping; // VariableDeclaration

{
    "constant": false,
    "id": 12,
    "mutability": "mutable",
    "name": "myUintMapping",
    "nodeType": "VariableDeclaration",
    "scope": 94,
    "src": "147:41:0",
    "stateVariable": true,
    "storageLocation": "default",
    "typeDescriptions": {
        "typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
        "typeString": "mapping(uint256 => uint256)"
    },
    "typeName": {
        "id": 11,
        "keyType": { <<<<<<<<<<<< difference from array
            "id": 9,
            "name": "uint256",
            "nodeType": "ElementaryTypeName",
            "src": "155:7:0",
            "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
            }
        },
        "nodeType": "Mapping", <<<<<<<<<<<< difference from array
        "src": "147:27:0",
        "typeDescriptions": {
            "typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
            "typeString": "mapping(uint256 => uint256)"
        },
        "valueType": { <<<<<<<<<<<< difference from array
            "id": 10,
            "name": "uint256",
            "nodeType": "ElementaryTypeName",
            "src": "166:7:0",
            "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
            }
        }
    },
    "visibility": "internal"
}

ASSIGN TO UINT MAPPING:

myUintMapping[key1] = param1;

{
    "expression": {
        "id": 77,
        "isConstant": false,
        "isLValue": false,
        "isPure": false,
        "lValueRequested": false,
        "leftHandSide": {
            "baseExpression": {
                "id": 73,
                "name": "myUintMapping",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 12, <<<<<<<< to distinguish between mappings vs arrays, look back at the VariableDeclaration of the referencedDeclaration node.
                "src": "782:13:0",
                "typeDescriptions": {
                    "typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
                    "typeString": "mapping(uint256 => uint256)" <<< Could use this to distinguish, but a bit messy
                }
            },
            "id": 75,
            "indexExpression": { <<<<< vs myAddressMapping, where the indexExpression could be 'msg.sender'; which is a struct MemberAccess, with MemberAccess.expression is a magic message / typeString is 'msg'.
                "id": 74,
                "name": "key1",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 68,
                "src": "796:4:0",
                "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                }
            },
            "isConstant": false,
            "isLValue": true,
            "isPure": false,
            "lValueRequested": true,
            "nodeType": "IndexAccess",  <<<< SAME AS STATIC ARRAY!!!!
            "src": "782:19:0",
            "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
            }
        },
        "nodeType": "Assignment",
        "operator": "=",
        "rightHandSide": {
            "id": 76,
            "name": "param1",
            "nodeType": "Identifier",
            "overloadedDeclarations": [],
            "referencedDeclaration": 70,
            "src": "804:6:0",
            "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
            }
        },
        "src": "782:28:0",
        "typeDescriptions": {
            "typeIdentifier": "t_uint256",
            "typeString": "uint256"
        }
    },
    "id": 78,
    "nodeType": "ExpressionStatement",
    "src": "782:28:0"
}

mapping(address => address) myAddressMapping; // VariableDeclaration

{
    "constant": false,
    "id": 16,
    "mutability": "mutable",
    "name": "myAddressMapping",
    "nodeType": "VariableDeclaration",
    "scope": 94,
    "src": "193:44:0",
    "stateVariable": true,
    "storageLocation": "default",
    "typeDescriptions": {
        "typeIdentifier": "t_mapping$_t_address_$_t_address_$",
        "typeString": "mapping(address => address)"
    },
    "typeName": {
        "id": 15,
        "keyType": { <<<<<<<<<<<< difference from array
            "id": 13,
            "name": "address",
            "nodeType": "ElementaryTypeName",
            "src": "201:7:0",
            "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
            }
        },
        "nodeType": "Mapping", <<<<<<<<<<<< difference from array
        "src": "193:27:0",
        "typeDescriptions": {
            "typeIdentifier": "t_mapping$_t_address_$_t_address_$",
            "typeString": "mapping(address => address)"
        },
        "valueType": { <<<<<<<<<<<< difference from array
            "id": 14,
            "name": "address",
            "nodeType": "ElementaryTypeName",
            "src": "212:7:0",
            "stateMutability": "nonpayable",
            "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
            }
        }
    },
    "visibility": "internal"
}

ASSIGN TO ADDRESS MAPPING:

myAddressMapping[msg.sender] = param1;

{
    "expression": {
        "id": 90,
        "isConstant": false,
        "isLValue": false,
        "isPure": false,
        "lValueRequested": false,
        "leftHandSide": {
            "baseExpression": {
                "id": 85,
                "name": "myAddressMapping",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 16,
                "src": "886:16:0",
                "typeDescriptions": {
                    "typeIdentifier": "t_mapping$_t_address_$_t_address_$",
                    "typeString": "mapping(address => address)"
                }
            },
            "id": 88,
            "indexExpression": { <<<<< vs myUintMapping, where the indexExpression will ordinarily be an Identifier (but could be something else)
                "expression": {
                    "id": 86,
                    "name": "msg",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 4294967281,
                    "src": "903:3:0",
                    "typeDescriptions": {
                        "typeIdentifier": "t_magic_message",
                        "typeString": "msg"
                    }
                },
                "id": 87,
                "isConstant": false,
                "isLValue": false,
                "isPure": false,
                "lValueRequested": false,
                "memberName": "sender",
                "nodeType": "MemberAccess",
                "src": "903:10:0",
                "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                }
            },
            "isConstant": false,
            "isLValue": true,
            "isPure": false,
            "lValueRequested": true,
            "nodeType": "IndexAccess",
            "src": "886:28:0",
            "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
            }
        },
        "nodeType": "Assignment",
        "operator": "=",
        "rightHandSide": {
            "id": 89,
            "name": "param1",
            "nodeType": "Identifier",
            "overloadedDeclarations": [],
            "referencedDeclaration": 82,
            "src": "917:6:0",
            "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
            }
        },
        "src": "886:37:0",
        "typeDescriptions": {
            "typeIdentifier": "t_address",
            "typeString": "address"
        }
    },
    "id": 91,
    "nodeType": "ExpressionStatement",
    "src": "886:37:0"
}
