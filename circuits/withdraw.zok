from "utils/pack/u32/nonStrictUnpack256.zok" import main as field_to_u32_8
from "./common/hashes/mimc/altbn254/mimc2.zok" import main as mimc2
from "./common/hashes/sha256/pad256ThenHash.zok" import main as sha256of256
from "utils/pack/bool/nonStrictUnpack256.zok" import main as field_to_bool_256
from "utils/pack/u32/unpack256ToBits.zok" import main as u32_8_to_bool_256
from "./common/hashes/sha256/pad768ThenHash.zok" import main as sha256of768
from "./common/hashes/sha256/pad1024ThenHash.zok" import main as sha256of1024
from "utils/pack/bool/pack256.zok" import main as bool_256_to_field
from "./common/merkle-tree/mimc/altbn254/verify-membership/height32.zok" import main as checkRoot

def main(\
	public field tokenId,\
	private u32[8] tokenOwners_tokenId_oldCommitment_owner_secretKey,\
	public field tokenOwners_tokenId_oldCommitment_nullifier,\
	private field tokenOwners_tokenId_oldCommitment_value,\
	private u32[8] tokenOwners_tokenId_oldCommitment_salt,\
	public field commitmentRoot,\
	private field tokenOwners_tokenId_oldCommitment_membershipWitness_index,\
	private field[32] tokenOwners_tokenId_oldCommitment_membershipWitness_siblingPath\
) -> ():


        // We need to hard-code the mappingId's of mappings into the circuit:
        field tokenOwners_mappingId = 6


        field tokenOwners_tokenId_stateVarId_field = mimc2([tokenOwners_mappingId, tokenId])


        u32[8] tokenOwners_tokenId_stateVarId = field_to_u32_8(tokenOwners_tokenId_stateVarId_field)


        // tokenOwners_tokenId_oldCommitment - PoKoSK:
        // The correctness of this secret key will be constrained within the oldCommitment existence check.

        u32[8] tokenOwners_tokenId_oldCommitment_owner_publicKey = sha256of256([...tokenOwners_tokenId_oldCommitment_owner_secretKey])


        // Nullify tokenOwners_tokenId:

        u32[8] tokenOwners_tokenId_oldCommitment_nullifier_check = sha256of768([\
          ...tokenOwners_tokenId_stateVarId,\
          ...tokenOwners_tokenId_oldCommitment_owner_secretKey,\
          ...tokenOwners_tokenId_oldCommitment_salt\
        ])

        assert(\
        field_to_bool_256(tokenOwners_tokenId_oldCommitment_nullifier)[8..256] == u32_8_to_bool_256(tokenOwners_tokenId_oldCommitment_nullifier_check)[8..256]\
        )


        // tokenOwners_tokenId_oldCommitment_commitment: preimage check

        u32[8] tokenOwners_tokenId_oldCommitment_commitment = sha256of1024([\
          ...tokenOwners_tokenId_stateVarId,\
          ...field_to_u32_8(tokenOwners_tokenId_oldCommitment_value),\
          ...tokenOwners_tokenId_oldCommitment_owner_publicKey,\
          ...tokenOwners_tokenId_oldCommitment_salt\
        ])


        // tokenOwners_tokenId_oldCommitment_commitment: existence check

        field tokenOwners_tokenId_oldCommitment_commitment_truncated = bool_256_to_field([...[false; 8], ...u32_8_to_bool_256(tokenOwners_tokenId_oldCommitment_commitment)[8..256]])

        field tokenOwners_tokenId_commitmentRoot_check = checkRoot(\
          tokenOwners_tokenId_oldCommitment_membershipWitness_siblingPath,\
          tokenOwners_tokenId_oldCommitment_commitment_truncated,\
          tokenOwners_tokenId_oldCommitment_membershipWitness_index\
        )

        assert(\
          field_to_bool_256(commitmentRoot)[8..256] == field_to_bool_256(tokenOwners_tokenId_commitmentRoot_check)[8..256]\
        )


        return
